虚荣的倒影 2022-07-13 22:31:13

    基于字节码的跨编译单元内联函数的实现, 链接时间代码生成

    这个, 今晚方便说咩, 会不会很长呢

0xAA55 姐介 2022-07-13 22:31:52

    以前编译器是把二进制直接生成出来后，放到 obj 里面，

    等待链接器解析符号、确定存储位置、做重定向。

    这就导致一个问题：
        当你写 C++ 的时候，C++ 有个关键字 inline 表示一个函数是内联函数。

    内联函数的概念你明白的吧。

虚荣的倒影 2022-07-13 22:32:50
    有听过
    就是不能递归, 不被编译为函数, 直接展开

0xAA55 姐介 2022-07-13 22:33:19
    是。
    C、C++ 本身有个优化行为：简短的函数直接展开，不管它是不是被声明为内联函数。

虚荣的倒影 2022-07-13 22:34:29
    ..那相当于, 内联就明确要展开咯..不声明为内联得看优化规则这样

0xAA55 姐介 2022-07-13 22:35:25
    被声明为内联函数的函数如果写得太长，展开后会导致程序体积暴增，
    这个时候编译器会选择无视你的内联请求，不给你内联。

虚荣的倒影 2022-07-13 22:36:24
    那..链接时的黑科技呢...

0xAA55 姐介 2022-07-13 22:36:32
    先给你做铺垫。

    先让你意识到现有的编译原理遇到了一个什么样的大问题
    为了解决这个问题，才有这个黑科技。

    首先写正经 C、C++ 程序讲究这么一点：面向对象编程。包括 C 语言。

        在 C 语言里面，用结构体来存储你的对象的数据；
        在 C++ 用类；

    每个.c、.cpp 只写代码专门处理这个对象的东西，对外提供这个对象相关的 API。

虚荣的倒影 2022-07-13 22:38:29
    回复: "被声明为内联函数的函数如果写得太长，展开后会导致程序体积暴增，这个时候编译器会选择无视你的内联请求，不给你内联。"
    话说, 这是按内联函数独立的编译尺寸判断还是, 按调用次数*尺寸判定的..

0xAA55 姐介 2022-07-13 22:38:46
    按编译后，函数的二进制码的尺寸
    你应该知道在汇编层面，调用函数的指令 call 本身的运行就有时间成本

虚荣的倒影 2022-07-13 22:40:48
    我觉着call这个指令, 跟跳转没差, 但是为了平衡堆栈为了传参, 
    为了安全啥的, 用了很多操作栈的指令

0xAA55 姐介 2022-07-13 22:40:54
    如果这个函数不用被你跳转过去执行，而是它的内容就在你的函数体里，
    那么你就能节省这个时间成本；

    而如果这个函数的行为只是做了一些简单的加减乘除运算，
    那么编译器可以做一些代数运算、合并同类项、
    把所有编译期间可以确定的常量值都给算好。

虚荣的倒影 2022-07-13 22:41:30
    单独call这个指令也会比一般跳转更消耗时间么

0xAA55 姐介 2022-07-13 22:41:57

    先不说是否消耗时间，至少 call 这个指令比跳转指令多了一个压栈的行为。
    它要把函数返回后，CPU取指令的地址设置好，才能跳转。

虚荣的倒影 2022-07-13 22:42:34

    得空我得再摸汇编了...这个实在是没懂咋写..
    我在youtube看了点nasm的视频
    但是它好像跟我用的工具有些许差别

0xAA55 姐介 2022-07-13 22:43:13

    先不管汇编。至少硬件机器上它得多一个操作。

    先说正经 C 编程的行为。

    首先你之前问过我，你想写出很多的小工程，组装成一个大工程。
    对于正经的编程而言，这是很合理的。
    事实上，每个单独的 .c 文件就是一个小工程，它负责实现一个特定的功能

    我打个比方：libpng 这个库，可以把 png 文件加载到内存里，解析内容，读出位图数据；以及保存位图数据（压缩）为 png 文件。
    这个库使用多个 .c 实现功能，
    有的 .c 负责压缩，
    有的 .c 负责算 CRC，
    有的 .c 负责组织 png 的文件格式，
    有的 .c 负责处理 PNG 扩展。


    每个 .c 文件使用一个 .h 文件来包装它自己的 API，
    也就是希望外部能看到的函数和结构体等。

    你对外定义好了 API 后，你内部怎么实现那是你的事；外部如何使用你内部的功能，靠的是你的 API 的设计。

    这个概念你清楚的吧，接口设计。

虚荣的倒影 2022-07-13 22:48:00

    ...我倒是经常写一些库自己用..

    但是正经的方式不清楚

    脚本语言写着方便

0xAA55 姐介 2022-07-13 22:48:30

    你内部可以更新版本，升级算法；

    但是你对外需要提供一套稳定不变的函数来让外部调用；

    你内部怎么改，都不应影响外部的使用

    不管它怎么升级、怎么更新，它文档说好的那几个函数方法它都得有

    就算是个空的函数，也得写。
    
    这样外部根据 API 来调用的时候，就能不受版本影响，正常工作。

    不仅函数名字不能变，参数也不能变

    就比如 Python 的 requests 库，

    比如 requests.get、requests.post

    如果要变，那就得改名，叫 requests2 了。

    这才符合版本管理。

    这个就叫 API


虚荣的倒影 2022-07-13 22:49:33
    这也算美德了....


0xAA55 姐介 2022-07-13 22:51:00
    这个是 API 的含义，

    是一种常识来着

    那么调用者同样也要遵循一个规则：只调用对外明确的 API。

    不能为了方便而瞎几把使用它内部实现的时候用到的东西


虚荣的倒影 2022-07-13 22:52:18
    ..要整也是单独提取咳咳

0xAA55 姐介 2022-07-13 22:52:33
    要整，那就得单独造一个新的轮子了。

0xAA55 姐介 2022-07-13 22:53:13
    另外你应该知道 Windows 就算不断地在变化、更新，它的 API 都是不会变的
    即使 API 内部的行为发生了巨大的变化，比如原先 GDI 是真的拿显卡在加速，而现在的 GDI 则是使用 CPU 的增强指令集来加速
    因为现在 GDI 的设计已经对硬件不友好了。

虚荣的倒影 2022-07-13 22:53:42
    ahk能从win98用到win11...
    目测根本原因就是winapi的良好设计

0xAA55 姐介 2022-07-13 22:54:11
    是的。

0xAA55 姐介 2022-07-13 22:54:28
    那么现在我把 API 说清楚了。接下来我要回到内联的话题上。
    首先因为 API 的关系，你总要设计一些 get、set 相关的函数。
    设计 get set 的时候，
    有时候你的函数体就只有一句话： return xxx;

虚荣的倒影 2022-07-13 22:55:27
    额, get set是写函数, 类方法命名时候的常客

0xAA55 姐介 2022-07-13 22:55:36
    这个 get set 是一种 API 设计

    int GetValue()
    {
        return Value;
    }

    是在有必要设计的时候，才有的设计。
    有很多人喜欢瞎几把写一堆没用的 get set。


虚荣的倒影 2022-07-13 22:57:32
    ... 必要性还是挺难衡量的..

0xAA55 姐介 2022-07-13 22:57:40
    不难衡量
    我刚在想办法举例
    比如你有个绘制文字的类，专门用来在图片上绘制文字
    你这个类的内部，你存储多个字体文件的信息

    你可以 Get 你的字体名字，但你不希望字体名字被 Set

    因为你这个类在创建的时候就已经加载了所有的字体，
    而如果被 Set 了字体名字，你是重新创建类呢，
    还是删除所有的字体、按照名字重新加载字体呢？

    显然是没必要的，让使用者去重新创建就行了

    这个时候，你就有了 GetFontName() 函数。

    你明白我的意思吧。

虚荣的倒影 2022-07-13 23:00:19
    嗯
    我多看两眼

0xAA55 姐介 2022-07-13 23:00:26
    别看了
    如果这都不明白的话，我举个别的例子
    或者不如换种方式来说：

    一般不会同时存在 Get 和 Set

虚荣的倒影 2022-07-13 23:01:05
    我觉得这个像property..
    仅实现get方法

0xAA55 姐介 2022-07-13 23:01:11
    就是一样的东西。


0xAA55 姐介 2022-07-13 23:01:24
    就是 property

0xAA55 姐介 2022-07-13 23:01:33
    只不过 C、C++ 没有 property 语法。

虚荣的倒影 2022-07-13 23:01:55
    咳咳..目测 这个是后期出现的概念

0xAA55 姐介 2022-07-13 23:01:56
    完全允许用户随便读写的东西直接用 public 变量就行了

0xAA55 姐介 2022-07-13 23:02:30
    而希望用户修改后，调用一些函数响应修改；
    或者不允许用户修改，但是允许用户获取的函数，
    就使用 property 并按照需求设置 get set

    好，那么这些话题其实依然还是“如何设计 API”的范畴

虚荣的倒影 2022-07-13 23:03:37
    啊, 继续

0xAA55 姐介 2022-07-13 23:03:37
    在设计 API 的时候，你会希望你的简短的 get set 函数能被内联。
    不能因为设计 API 而导致性能受损。

    那假设你写了 asdf.c 这个源码，
    它提供针对 asdf 这个数据的 get_value 和 set_value 函数，

    正常情况下，函数体是写在 .c 源码里面的，
    函数声明写在 .h 文件里面，负责声明 API 给别的 .c


    但是内联函数是需要你把函数体也写到 .h 里面去的，
    因为只有这样，别的 .c 在调用这些函数的时候，
    才能内联你的 get_value 和 set_value


    那这就存在一个比较大的问题：
        万一你的 set_value 实际的长度很长，编译器认为不能内联，导致内联失败呢？

    你觉得会怎么样？

虚荣的倒影 2022-07-13 23:07:14
    报错还是直接编译成函数call
    报错好像不合逻辑哈
    编译成函数 call，但是函数体呢？
    函数被声明为内联，函数体在头文件里，所有的 .c 包含了这个头文件
    会怎样？

虚荣的倒影 2022-07-13 23:08:07
    我想想

0xAA55 姐介 2022-07-13 23:08:07
    会导致这个函数体，出现在每一份 .obj 里面

虚荣的倒影 2022-07-13 23:08:30
    这个应该是有冲突的哈
    如果不能成为内联

0xAA55 姐介 2022-07-13 23:08:49
    没有冲突，因为 inline 关键字会导致函数的符号不被导出。

虚荣的倒影 2022-07-13 23:09:05
    那会变成匿名函数一类的东西?

0xAA55 姐介 2022-07-13 23:09:10
    不是。

虚荣的倒影 2022-07-13 23:09:23
    随机符号?

0xAA55 姐介 2022-07-13 23:09:29
    记得昨天我给你说的 static 关键字没？

虚荣的倒影 2022-07-13 23:09:33
    嗯呐

虚荣的倒影 2022-07-13 23:09:38
    只在此文件有效

0xAA55 姐介 2022-07-13 23:09:43
    会变成 static 函数。

虚荣的倒影 2022-07-13 23:09:47
    嗯呐

0xAA55 姐介 2022-07-13 23:10:00
    static 就是不导出函数或者变量的符号

虚荣的倒影 2022-07-13 23:10:20
    .h 和 同名的 .c是有强相关的是嘛

0xAA55 姐介 2022-07-13 23:10:21

    对这个函数和变量的地址的引用，由编译器计算，这部分不需要链接器来处理

    .h 里面声明你设计好的 API 啊，.c提供 API 的内容实现

    每个 .c 就是靠 API 来调用别的 .c 提供的功能

    设计 API 的时候，你会设计一些 get set 类型的函数，
    这些函数的函数体很短，应当被内联

    为了内联，你需要把函数体写到 .h 里面

    而别的 .c 包含你的 .h 的时候，因为得到了函数体，所以使内联变得可能。

    而这个时候，如果出现一种情况：你觉得应该内联的函数，实际上却很大，不值得内联，这个时候编译器是不会内联的。它会把这个函数直接当做 static 函数来处理，以保证就算不能内联，也不至于编译失败。

虚荣的倒影 2022-07-13 23:14:32
    "链接时间代码生成"就是指 头文件中包含内联函数的实现么

0xAA55 姐介 2022-07-13 23:14:44
    算了。我的耐心耗尽。

虚荣的倒影 2022-07-13 23:14:48
    ..............
    这部分我看懂了倒是

0xAA55 姐介 2022-07-13 23:15:43
    看懂了是吧。
    那继续

    而这个时候，如果出现一种情况：你觉得应该内联的函数，实际上却很大，不值得内联，这个时候编译器是不会内联的。它会把这个函数直接当做 static 函数来处理，以保证就算不能内联，也不至于编译失败。
    那这个时候

    所有包含了这个头文件的 .c 里面都有一份这个函数的函数体

    比如你写了个给整数值取最大或者最小的函数：
    inline int max(int a, int b){ return a > b ? a : b; }

    这个函数假设没有被内联成功
    （
        在 MIPS 芯片上，a > b 的条件判断需要很多的汇编指令，
        导致其内联后程序体积变得过大、优化变得微不足道
    ）

    那么你整个工程里会有大量的这个函数的函数体

    最典型的例子：VS2010 编译很多旧的 MFC 工程，
    编译出来有 100 MB 那么大，
    那是因为 MFC 里面有很多 get set 是内联失败了的，
    这些内联失败的函数。

    链接时间，指的是链接器工作的时间
    这个东西和头文件有个屁的关系



虚荣的倒影 2022-07-13 23:20:33
    内联函数, 是翻译成汇编的时候就内联的嘛
    后面就没有内联函数的事情了是嘛...
    （屏住呼吸。。。）

0xAA55 姐介 2022-07-13 23:21:12
    不是
    内联函数是在编译器对你的代码进行语义处理后，
    优化你的逻辑的时候把函数体插入到调用位置处进行内联的

    类似于你用 #define 的方式，把一段很长的代码压缩为一个宏

虚荣的倒影 2022-07-13 23:22:26
    我是想啊。 0.c>1.汇编>2.o
    0-1之间发生的内联展开
    是吧

0xAA55 姐介 2022-07-13 23:22:46
    编译器要根据多个角度来判断函数是否过于复杂不适合内联，
    因此不仅要判断你函数有多少行为，你函数本身会生成多少汇编指令，也要看

    0-1之间发生的内联展开
    0-1，1-2之间都会。

    你用 #define 的方式，把一段很长的代码压缩为一个宏，是一种强行内联的行为

虚荣的倒影 2022-07-13 23:24:45
    #define算复制黏贴吧, 没有转static的可能性...

0xAA55 姐介 2022-07-13 23:24:48
    回复: "#define算复制黏贴吧, 没有转static的可能性..."
    对

    编译器在跑完预处理后，你所有#define 的宏都展开为你的函数体了，那编译器没办法再把这些函数体打包为函数了。

    主要是这一部分的内容是我考虑到一个重要内容
    
    在告诉你之前需要帮你温习一下之前说的知识点

    我当时写了一百多个字，举例 2012 年左右的一些代码编译出来体积巨大

    是因为这些代码有很多内联失败的函数成为了 static 函数了

    我最后简短说两句话总结一下：

    因为 在头文件里书写函数的具体实现 这一点破坏了 API 设计的规范

    （
        类似于 kernel32.dll 里面啥内容都没有，
        它里面的内容全部被写进了 Windows.h 
        导致你包含 Windows.h 后你的工程编译出来体积巨大，
        每个.c 文件都像自带了一个 kernel32.dll 一样
    ）

    正确的 API 设计：
        kernel32.dll 内部有很多函数的具体实现（二进制指令），
        对外它导出符号，允许你调用它的函数。

    错误的 API 设计：   
        为了优化，把本该在 kernel32.dll 里的函数内容全给搬到了 Windows.h 里面去了，你每包含一个 Windows.h 你的程序体积就剧增一下。


    为了纠正这种事情的发生，C 语言的编译器做这么两件事：

        1、不再生成二进制指令到 obj 里，而是把 .c 源码做了语义处理后，生成为一种中间语言字节码。

        2、链接器拿到所有的字节码，拼接成一整个大的“临时.c”源码，当做一个单文件编译。

    这样的话，
        你就不用在头文件里写函数实现了，
        你甚至都没必要使用 inline 关键字了，
        因为 C 编译器会自动把简短的函数内联了。


    这样的话，
        inline 关键字就和 static 关键字效果完全一样了。

    但 static 能做到的东西 inline 做不到。
    事实上就是 inline 关键字变得无用。

0xAA55 姐介 2022-07-13 23:36:33
    我说完了。

    你现在应该是能看懂的。

    晚安。

虚荣的倒影 2022-07-13 23:36:43
    铺垫了这么多...
    谢谢你. 去睡吧

0xAA55 姐介 2022-07-13 23:36:46
    有问题留言
    不铺垫的话，你是看不懂的。


虚荣的倒影 2022-07-14 0:47:20

    链接时间代码生成, 是指
        没有被编译器编译为obj的部分, 
        链接器 编译了 这些非obj部分合并后的 中间语言字节码

    不同的"编译单元" 包含的 相同"带有函数实现的头文件" 会产生大量的二进制副本

    早期的编译工具没有做此类优化
    
    编译单元, 应该就是指 .o 与 .obj 吧

    然后是编译器的优化有自动化实现类似 inline 的功效. 
    
    你给了结论 inline 无用

    inline 在实现生成的 二进制代码过长的时候, 将转为 static

    ... 所以这个黑科技, 其实是概念性的, 非开发者主动做的事情...

